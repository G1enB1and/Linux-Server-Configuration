AWL Lightsail Udacity-Ubuntu-512MB-Virginia-1
networking - static IP - bind to above instance as
Udacity-static-IP: 23.20.77.227
private key made by lightsail: LightsailDefaultKey-us-east-1.pem
saved to C:\Users\gbland\.ssh\LightsailDefaultKey-us-east-1.pem

ssh -i .ssh/grader grader@23.20.77.227 -p 2200

$ ssh ubuntu@23.20.77.227 -i .ssh/LightsailDefaultKey-us-east-1.pem
$ sudo apt-get update
$ sudo apt-get upgrade
$ sudo apt-get autoremove
$ sudo apt-get install finger
$ sudo adduser --home /home/grader --shell /bin/bash --ingroup admin grader
password: grader

exit - try to log in as grader:

$ ssh grader@23.20.77.227
output: grader@23.20.77.227: Permission denied (publickey).

log back in as ubuntu
$ ssh ubuntu@23.20.77.227 -i .ssh/LightsailDefaultKey-us-east-1.pem

switch to grader
$ su grader

$ sudo whoami
root

exit - try to log in as grader with same key as ubuntu:
$ ssh grader@23.20.77.227 -i .ssh/LightsailDefaultKey-us-east-1.pem
output: grader@23.20.77.227: Permission denied (publickey).

log back in as ubuntu
$ ssh ubuntu@23.20.77.227 -i .ssh/LightsailDefaultKey-us-east-1.pem

check sshd_config for PubkeyAuthentication yes
$ sudo nano /etc/ssh/sshd_config
"PubkeyAuthentication yes" was already set and uncommented.
ctrl x (to exit nano)

switch to the root user
$ sudo su
add a password for that user
$ passwd <username>


to enable sudo for user method 1:
now add the user to sudoers list by running
$ visudo
search for "root ALL = (ALL) ALL"
added "grader ALL = (ALL) ALL" just below it.
write and quit


to enable sudo for user method 2:
$ sudo touch /etc/sudoers.d/grader
$ sudo nano /etc/sudoers.d/grader
add the following line:
"student ALL=(ALL) ALL"
write and quit

switch to new user:
$ su grader

switch to the users home directory:
$ cd /home/grader/

generate keys:
$ ssh-keygen -b4096 -f grader -t rsa
password: grad3r

make a .ssh folder inside the user folder:
$ mkdir .ssh

set permission for owner of file to read, write, and execute:
$ chmod 700 .ssh

store public key in authorized keys file:
$ cat grader.pub > .ssh/authorized_keys

set permission for owner to read and write to the file:
$ chmod 600 .ssh/authorized_keys

set the owner to grader and the group to admin:
$ sudo chown grader:admin .ssh

to set the owner to grader and the group to admin:
$ sudo chown grader:admin .ssh/authorized_keys

to copy user:
sudo rsync -avr grader /home/ubuntu/

set permissions:
$ sudo chmod 777 /home/ubuntu/grader

-- Using your local terminal --

to copy the key "<username>" from your AWS Server:
scp -i .ssh/LightsailDefaultKey-us-east-1.pem ubuntu@23.20.77.227:/home/ubuntu/grader .ssh/grader

set permissions so than owner can read
$ chmod 400 .ssh/grader

to access aws server as this user:
$ ssh -i .ssh/grader grader@23.20.77.227
password: grad3r

-LOGIN SUCCESSFUL!

test sudo:
$ sudo su
[sudo] password for grader:
grader

-success!

Forcing Key Based Authentication: (this was already set)

edit sshd_config: 
$ sudo nano /etc/ssh/sshd_config
change "PasswordAuthentication yes" to no.
write file and exit.
restart to ssh service:
$ sudo service ssh restart

Remove password from grader: (this could have been done earlier when adding grader)
$ sudo nano /etc/sudoers.d/grader
change the following line from
"grader ALL=(ALL) ALL" to "grader ALL=(ALL) NOPASSWD:ALL"
write file and exit
login as root:
$ sudo su
edit visudo:
$ visudo
change the following line from
"grader ALL=(ALL) ALL" to "grader ALL=(ALL) NOPASSWD:ALL"
write file and exit
exit root:
$ exit

-------------------------------------------------------------
Change SSH port 22 to custom port 2200:
add custom TCP port 2200 in AWS Lightsail Networking settings for 23.20.77.227

Configure the Uncomplicated Firewall (UFW) as follows:
only allow incoming connections for SSH port 2200, HTTP port 80, and NTP port 123. (see steps below).
make sure ufw is inactive before configuring it:
$ sudo ufw status
output: status: inactive
set default to deny all incoming
$ sudo ufw default deny incoming
set default to allow all outgoing
$ sudo ufw default allow outgoing
allow ssh:
$ sudo ufw allow ssh
allow ssh on port 2200:
$ sudo ufw allow 2200/tcp
allow www
$ sudo ufw allow www
enable ufw
$ sudo ufw enable
check status
$ sudo ufw status

$ ssh -i .ssh/grader grader@23.20.77.227 -p 2200

output: ssh: connect to host 23.20.77.227 port 2200: Connection refused

$ ssh -i .ssh/grader grader@23.20.77.227

success

Edit sshd_config

$ sudo nano /etc/ssh/sshd_config
added Port 2200 below Port 22
write file and exit
reboot server

$ ssh -i .ssh/grader grader@23.20.77.227 -p 2200
success!

Edit sshd_config

$ sudo nano /etc/ssh/sshd_config
Remove Port 22
write file and exit

Remove SSH Port 22 from AWS Lightsail Networking settings.
Reboot server

$ sudo ufw allow ntp
$ sudo ufw deny 22

$ ssh -i .ssh/grader grader@23.20.77.227 -p 2200
Success!

-----------------------------------------------------
Install Apache
$ sudo apt-get install apache2

Now going to 23.20.77.227 in a browser shows the Apache2 landing page.

Apache, by default, serves its files from the /var/www/html directory. If you explore this directory you will find a file called index.html

------------------------------------------------------
Install mod_wsgi to serve Python 2.7

$ sudo apt-get install libapache2-mod-wsgi

Excerpt from Udacity: "
You then need to configure Apache to handle requests using the WSGI module. You’ll do this by editing the /etc/apache2/sites-enabled/000-default.conf file. This file tells Apache how to respond to requests, where to find the files for a particular site and much more. You can read up on everything this file can do within the Apache documentation.

For now, add the following line at the end of the <VirtualHost *:80> block, right before the closing </VirtualHost> line: WSGIScriptAlias / /var/www/html/myapp.wsgi

Finally, restart Apache with the sudo apache2ctl restart command.

You might get a warning saying "Could not reliably determine the server's fully qualified domain name". If you do, don't worry about it. Check out this AskUbuntu thread for a discussion of the cause of this message."

$ sudo nano /etc/apache2/sites-enabled/000-default.conf
add "WSGIScriptAlias / /var/www/html/myapp.wsgi" just before "</VirtualHost>".
write file and exit (ctrl o, enter, ctrl x)
$ sudo apache2ctl restart

Excerpt from Udacity: "WSGI is a specification that describes how a web server communicates with web applications. Most if not all Python web frameworks are WSGI compliant, including Flask and Django; but to quickly test if you have your Apache configuration correct you’ll write a very basic WSGI application.

You just defined the name of the file you need to write within your Apache configuration by using the WSGIScriptAlias directive. Despite having the extension .wsgi, these are just Python applications. Create the /var/www/html/myapp.wsgi file using the command sudo nano /var/www/html/myapp.wsgi. Within this file, write the following application:"

$ sudo nano /var/www/html/myapp.wsgi
Paste in the following:
"def application(environ, start_response):
    status = '200 OK'
    output = 'Hello Udacity!'

    response_headers = [('Content-type', 'text/plain'), ('Content-Length', str(len(output)))]
    start_response(status, response_headers)

    return [output]"
write file and exit (ctrl o, enter, crtl x)

Excerpt from Udacity: "This application will simply print return Hello Udacity! along with the required HTTP response headers. After saving this file you can reload http://localhost:8080 to see your application run in all its glory!"

Now going to 23.20.77.227 in a browser shows "Hellow Udacity!"

------------------------------------------------------
Install PostgreSQL

$ sudo apt-get install postgresql


-do not allow remote connections.
-create a new database user named "catalog" that has limited permissions 
 to the catalog application database.

------------------------------------------------------
Install git

$ sudo apt-get install git
Configure git for first time use:
$ git config --global user.name "G1enB1and"
$ git config --global user.email "glen.bland.81@gmail.com"
$ git config --global color.ui auto
$ git config --global merge.conflictstyle diff3
$ git config --list

##Git & Code Editor  
The last step of configuration is to get Git working with your code editor.
Below are three of the most popular code editors. If you use a different editor,
then do a quick search on Google for "associate X text editor with Git"
(replace the X with the name of your code editor).  

### Atom Editor Setup  
`git config --global core.editor "atom --wait"`  

### VSCode Setup  
`git config --global core.editor "code --wait"`  

### nano ?
$ git config --global core.editor "nano --wait" ?

nothing done for setting an editor yet. Going to see what happens without setting first.

----------------------------------------------------------------

## To clone an existing git repository:  
`git clone` downloads a copy of an existing repository to the current working directory.  
Current working directory must not already be a git repository.  

Pass the url to an existing git repository by putting the url after `git clone`  
like this: `git clone https://github.com/udacity/course-git-blog-project`  

optionally, you can pass a new repository name after the url to clone an  
existing repository to a new name. Like this:  
`git clone https://github.com/udacity/course-git-blog-project new-repo-name`  

Don't forget to `cd` into the newly cloned directory before attempting any  
other git commands on it.  

$ sudo mkdir /home/ubuntu/gitrepo
$ cd /home/ubuntu/gitrepo
$ sudo git clone https://github.com/G1enB1and/fullstack-nanodegree-vm catalog
$ cd catalog
$ cd vargrant

$ cd /var/www/html
$ sudo mv index.html apache2index.html
$ sudo mv myapp.wsgi helloworld.wsgi
$ sudo mv /home/ubuntu/gitrepo/catalog/vagrant/catalog /var/www/html

---------------------------------------------------------

$ sudo nano /etc/apache2/sites-enabled/000-default.conf
edit "WSGIScriptAlias / /var/www/html/myapp.wsgi" to
"WSGIScriptAlias / /var/www/html/catalog/application.wsgi".
write file and exit (ctrl o, enter, ctrl x)
$ sudo mv application.py application.wsgi
$ sudo apache2ctl restart

---------------------------------------------------------





https://www.youtube.com/watch?v=x6SvecADw2M
http://fosshelp.blogspot.com/2014/03/how-to-deploy-flask-application-with.html

deploy Catalog Project (I used Python 2.7) - change Port 8000 to 80

Configure local timezone to UTC

