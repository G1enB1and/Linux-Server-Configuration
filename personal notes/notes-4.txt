ubuntu$ sudo apt-get install apache2
ubuntu$ sudo apt-get install python-pip virtualenv
ubuntu$ sudo su
root$ cd /etc/apche2/sites-available
root$ nano flask.conf

<VirtualHost *:80>
	serverName	flaskapp.com
	WSGIScriptAlias / /var/www/flask/flask.wsgi
	<Directory /var/www/flask>
		Order allow,deny
		Allow from all
	</Directory>

	ErrorLog ${APACHE_LOG_DIR}/error.log
	CustomLog ${APACHE_LOG_DIR}/error.log combined
</VirtualHost>

root$ apt-get install libapache2-mod-wsgi
root$ cd /var/www
root$ mkdir flask
root$ cd flask
root$ mkdir static templates
root$ virtualenv venv
root$ nano init.py

from flask import Flask

app = Flask (__name__)
@app.route("/")
def index():
  return "hellow world"

if __name__ == "__main__":
  app.run()

root$ pip install flask
root@ip:/var/www/flask# python
>>> import flask
>>>
root@ip:/var/www/flask# python init.py
(test in browser) - working
ctrl c to quit

root@ip:/var/www/flask# nano flask.wsgi

import sys
sys.path.insert(0, "/var/www/flask/")

from init import app as application

root@ip:/var/www/flask# apt-get install a2enmod
root@ip:/var/www/flask# a2ensite flask.conf
root@ip:/var/www/flask# service apache2 reload
root@ip:/var/www/flask# a2dissite 000-default.conf
root@ip:/var/www/flask# service apache2 reload
test in browser  - working

----------------------------------------------------------------------------------
https://www.youtube.com/watch?v=_80H2WIuA7w
https://pythonprogramming.net/flask-web-development-tutorial/

logged in as root
$ sudo apt-get install apache2
$ sudo apt-get install libapache2-mod-wsgi
$ sudo a2enmod wsgi


## /var/www/FlaskApp/FlaskApp/__init__.py

from flask import Flask

app = Flask(__name__)

@app.route('/')
def homepage():
    return "Hello World"

if __name__ == "__main__":
    app.run()

$ sudo apt-get install python-pip
$ sudo pip install virtualenv
$ sudo virtualenv venv

the only time tyou need to activate venv is to install flask inside of it.

$ source venv/bin/activate
(venv)$ sudo pip install Flask
$ deactivate

## /etc/apache2/sites-available/FlaskApp.conf
<VirtualHost *:80>
		ServerName glenallin.com
		ServerAdmin glen@glenbland.com

		WSGIScriptAlias / /var/www/FlaskApp/flaskapp.wsgi

		<Directory /var/www/FlaskApp/FlaskApp>
			Require all granted
		</Directory>

		Alias /static /var/www/FlaskApp/FlaskApp/static

		<Directory /var/www/FlaskApp/FlaskApp/static>
			Require all granted
		</Directory>

		ErrorLog /var/www/FlaskApp/error.log
                LogLevel warn
                CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>

$ service apache2 reload
$ sudo a2ensite FlaskApp

## /var/www/FlaskApp/flaskapp.wsgi

#!/usr/bin/python

import sys
import logging

logging.basicConfig(stream=sys.stderr)
sys.path.insert(0,"/var/www/FlaskApp/")

from FlaskApp import app as application
application.secret_key = "oewdhfowijhfoiqwf"

$ sudo service apache2 restart

/var/www/FlaskApp/FlaskApp
venv
templates
static
__init__.py

/var/www/FlaskApp
flaskapp.wsgi

I had to change python code to reflect full path instead of relative for client_secrets and catalog.db

('sqlite:///catalog.db')
('sqlite:////var/www/FlaskApp/FlaskApp/catalog.db')


site is working at glenallin.com, not glenallin.com:8000

have to change google developer credentials and download new client_secrets.json

---------------------------------------------------------------------------

Hello

regarding to your files structure the (venv) folder should be in /var/www/FlaskApp/

about DB try del catalog.db and run database_setup.py again

be sure update this line of code in both __init__.py and database_setup.py

engine = create_engine('sqlite:///var/www/FlaskApp/FlaskApp/catalogdb.db')

-----------------------------------------------------------------------------


We recommend postgresql, but it's okay to use sqlite. And, yes 
"the only line of code needed to change from sqlite to psql in python is the 
engine = create_engine('...') line ".


To access SQLite use full path. e.g.: 
engine = create_engine('sqlite:////var/www/FlaskApp/FlaskApp/catalog.db')


To copy the contents of sqlite.db into the PostgreSQL database Use PgLoader:

https://pgloader.readthedocs.io/en/latest/pgloader.html
$ apt install pgloader


$ sudo su catalog -c 'pgloader /path/to/sqlite.db postgresql://catuser:catpass@/catalog'

so...

$ sudo su catalog -c 'pgloader sqlite:////var/www/FlaskApp/FlaskApp/catalog.db postgresql://catalog:password@/catalog'
no ubuntu user named catalog, only postgres user named catalog - doesn't work

$ pgloader sqlite:////var/www/FlaskApp/FlaskApp/catalog.db postgresql://catalog:password@/catalog
   Failed to connect to pgsql at :UNIX (port 5432) as user "catalog": Database error 28000:
   Peer authentication failed for user "catalog".

$ pgloader sqlite:////var/www/FlaskApp/FlaskApp/catalog.db postgresql://catalog:password@localhost/catalog
   Failed to connect to pgsql at "localhost" (port 5432) as user "catalog": Data
   base error 28P01: password authentication failed for user "catalog"

$ sudo -u postgres psql catalog -c 'pgloader sqlite:////var/www/FlaskApp/FlaskApp/catalog.db postgresql://catalog:password@localhost/catalog'
   ERROR:  syntax error at or near "pgloader"
   LINE 1: pgloader sqlite:////var/www/FlaskApp/FlaskApp/catalog.db pos...

$ sudo -u postgres psql catalog
$ pgloader sqlite:////var/www/FlaskApp/FlaskApp/catalog.db postgresql://catalog:password@localhost/catalog

If for some reason you are not prompted for a password when issuing these commands, 
you can use the -W option
$ psql -d databasename -U username -W

pgloader sqlite:////var/www/FlaskApp/FlaskApp/catalog.db postgresql://catalog:mypassword@127.0.0.1/catalog



