to create a user:

add user
$ sudo adduser <username>
switch to the root user
$ sudo su
add a password for that user
$ passwd <username>


to enable sudo for user:
now add the user to sudoers list by running
$ visudo
search for [root ALL = (ALL) ALL]
add [<username> ALL = (ALL) ALL] just below it.
esc :wq to write and quit
or you could use nano instead of visudo

to switch to a user:
$ su <username>

to delete a user:
$ sudo userdel -rf <username>

Public and Private Keys for Users:

switch to the user directory:
$ cd /home/<username>/

generate keys:
$ ssh-keygen -b4096 -f <username> -t rsa

make a .ssh folder inside the user folder:
$ mkdir .ssh

set permission for owner of file to read, write, and execute:
$ chmod 700 .ssh

store public key in authorized keys file:
$ cat <username>.pub > .ssh/authorized_keys

set permission for owner to read and write to the file:
$ chmod 600 .ssh/authorized_keys

-below section might need to chnage group name to ubuntu or admin or sudo instead of ec2-user.
to set the owner to <username> and the group to ec2-user:
$ sudo chown <username>:ec2-user .ssh

to set the owner to <username> and the group to ec2-user:
$ sudo chown <username>:ec2-user .ssh/authorized_keys

to copy user:
$ sudo cp <username> /home/ec2-user
or
$ sudo rsync -avr <username> /home/ec2-user/

set permissions:
$ sudo chmod 777 /home/ec2-user/<username>

-- Using your local terminal --
again, ec2-user may need to be "ubuntu" instead.

to copy the key "<username>" from your AWS Server:
$ scp -i <username.pem> ec2-user@<IP>:/home/ec2-user/<username> <username>
-above line might need sudo-

set permissions so than owner can read
$ chmod 400 <username>

to access aws server as this user:
$ ssh -i <key_just_created> <username>@<IP>

--------------------------------------------------------

help from mentor about flask:

How Can I verify that Flask is installed?

Testing outside virtual environment (venv)
Run:

$ pip freeze|grep -i flask

Should show something like:

Flask==1.0.2
Flask-Babel==0.11.2
Flask-Dance==0.14.0
Flask-HTTPAuth==3.2.3
Flask-Limiter==1.0.1
   (...)
If not, then Install flask: $ sudo pip install Flask After this, change directory to sys.path.insert: $ cd /var/www/html/catalog/

And run: $ python application.wsgi

Any error? Please, paste the error here. And paste your file application.wsgi

The statement

from catalogx import app as application

inside your application.wsgi file means:

Expects catalogx to be a folder with __init__.py inside. Or a file named: catalogx.py like: /var/www/html/catalog/catalogx.py

Next, run the following command to test if the installation is successful and the app is running:

$ python __init__.py

----------------------

Leon D.

Mentor

Virtual environment
Note: virtual env is not a requirement to pass.

Testing inside virtual environment (venv)
Basically, it is the same procedure. First of all activate the virtual environment with the following command:

$ source venv/bin/activate
(venv)  catalog$ 
From now on proceed as above to check up your installation. e.g.

(venv)  catalog$ pip freeze |grep -i flask
   (...)

---------------------

yes... the use virtualenv gives you the ability later to run more than a site on your machine.

it is easy and not complicated... so go for it

For installation:

$ sudo pip install virtualenv

Then create your virtualenv instance

$ sudo virtualenv <somename>

Then access that instance and pip install your packages inside of it, becareful not to use sudo when you do pip install, because otherwise you will install python packages outside of the virtualenv instance

$ source <somename>/bin/activate

(somename)$ pip install ....

(edited)

-----------------------

The flask app (project.py) and the wsgi file (items-catalog.wsgi) are located inside

/var/www/flaskApp/items-catalog/

This is my wsgi file:
import sys
import logging
logging.basicConfig(stream=sys.stderr)
sys.path.insert(0,"/var/www/flaskApp/items-catalog/")
from project import app as application
application.secret_key = application.renderToken(32)
application.run()

-----------------------

My apache2 Config file located at /etc/apache2/sites-enabled/items-catalog.conf contains

<VirtualHost *:80>
                ServerName 18.184.87.59
                ServerAdmin ciscuypers@gmail.com
                WSGIDaemonProcess items-catalog
                WSGIScriptAlias / /var/www/flaskApp/items-catalog/items-catalog.wsgi
                <Directory /var/www/flaskApp/items-catalog/>
                        Order allow,deny
                        Allow from all
                </Directory>
                ErrorLog /var/www/flaskApp/items-catalog/FlaskApp-error.log
                LogLevel warn
                CustomLog ${APACHE_LOG_DIR}/FlaskApp-access.log combined
</VirtualHost> 

--------------------------

<VirtualHost *:80>
                ServerName 23.20.77.227
                ServerAdmin glen@glenbland.com
                WSGIDaemonProcess catalog
                WSGIScriptAlias / /var/www/html/catalog/application.wsgi
                <Directory /var/www/html/catalog/>
                        Order allow,deny
                        Allow from all
                </Directory>
                ErrorLog /var/www/html/catalog/FlaskApp-error.log
                LogLevel warn
                CustomLog ${APACHE_LOG_DIR}/FlaskApp-access.log combined
</VirtualHost>

-----------------------------------------------------------

sites-available vs sites-enabled
Apache ignores sites-available (/etc/apache2/sites-available/) until you enable the site.

When enabled it symlinks it in sites-enabled (/etc/apache2/sites-enabled/).

The actual .conf files are stored in /etc/apache2/sites-available/.

They only become active if they are linked (basically a shortchut) in the /etc/apache2/sites-enabled directory.

This is what a2ensite does.

Run the following command:

$ sudo a2ensite catalog # To enable catalog site.

After that, list the folders to see the changes: $ ls /etc/apache2/sites-enabled/

and,

$ ls /etc/apache2/sites-available/

And every time you make such changes in sites-available, you need to reload apache to recognize the new configurations.

$ sudo systemctl restart apache2

or,

$ sudo apache2ctl restart

The idea here is that all your sites are defined by files in the sites-available folder.

https://tutorials.ubuntu.com/tutorial/install-and-configure-apache#3

--------------------------------------------------------------------

Run the following commands: 
$ sudo a2dissite 000-default 
$ sudo systemctl restart apache2
To disable the default Apache virtual host (000-default).

After that, list the folders to see the changes: 
$ ls -las /etc/apache2/sites-enabled/
$ ls -las /etc/apache2/sites-available/

---------------------------------------------------------------------

new method to copy copy public key:

You now need to configure your public key as an authorized host in your server. On the terminal that you opened on your own computer, print your public key to the screen:

$ cat ~/.ssh/id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCjw....F8Xv4f/0+7WT miguel@miguelspc
This is going to be a very long sequence of characters, possibly spanning multiple lines. You need to copy this data to the clipboard, and then switch back to the terminal on your remote server, where you will issue these commands to store the public key:

$ echo <paste-your-key-here> >> ~/.ssh/authorized_keys
$ chmod 600 ~/.ssh/authorized_keys
The password-less login should now be working. The idea is that ssh on your machine will identify itself to the server by performing a cryptographic operation that requires the private key. The server then verifies that the operation is valid using your public key.

You can now log out of your ubuntu session, and then from your root session, and then try to login directly to the ubuntu account with:

----------------------------------------------------------------------------

/etc/ssh/sshd_config: Disable root logins.

PermitRootLogin no

-----------------------------------------------------------------------------

