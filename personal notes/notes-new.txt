AWS Lightsail Udacity-Ubuntu-512MB-Virginia-1
networking - static IP - bind to above instance as
Udacity-static-IP: 23.20.77.227
private key made by lightsail: LightsailDefaultKey-us-east-1.pem
saved to C:\Users\gbland\.ssh\LightsailDefaultKey-us-east-1.pem

ssh -i .ssh/grader grader@23.20.77.227 -p 2200
grad3r
ssh -i c/users/glen/.ssh/LightsailDefaultKey-us-east-1.pem ubuntu@23.20.77.227 -p 2200
ssh -i .ssh/LightsailDefaultKey-us-east-1.pem ubuntu@23.20.77.227 -p 2200

I registered glenallin.com with Dreamhost,
created a DNS Zone in AWS Lightsail,
used the following Nameservers provided by my Lightsail DNS Zone:
ns-493.awsdns-61.com
ns-1865.awsdns-41.co.uk
ns-1014.awsdns-62.net
ns-1419.awsdns-49.org
instead of the default nameservers in Dreamhost.
Added a record in the lightsail dns records to point @.glenallin.com to Udacity-StaticIp-Virginia-1 (My Lightsail Instance)
note that @. in the subdomain field means no subdomain, but rather the main domain glenallin.com.



$ ssh ubuntu@23.20.77.227 -i .ssh/LightsailDefaultKey-us-east-1.pem
$ sudo apt-get update
$ sudo apt-get upgrade
$ sudo apt-get autoremove
$ sudo apt-get install finger
$ sudo adduser --home /home/grader --shell /bin/bash --ingroup admin grader
password: grader

exit - try to log in as grader:

$ ssh grader@23.20.77.227
output: grader@23.20.77.227: Permission denied (publickey).

log back in as ubuntu
$ ssh ubuntu@23.20.77.227 -i .ssh/LightsailDefaultKey-us-east-1.pem

switch to grader
$ su grader

$ sudo whoami
root

exit - try to log in as grader with same key as ubuntu:
$ ssh grader@23.20.77.227 -i .ssh/LightsailDefaultKey-us-east-1.pem
output: grader@23.20.77.227: Permission denied (publickey).

log back in as ubuntu
$ ssh ubuntu@23.20.77.227 -i .ssh/LightsailDefaultKey-us-east-1.pem

check sshd_config for PubkeyAuthentication yes
$ sudo nano /etc/ssh/sshd_config
"PubkeyAuthentication yes" was already set and uncommented.
ctrl x (to exit nano)

switch to the root user
$ sudo su
add a password for that user
$ passwd <username>


to enable sudo for user method 1:
now add the user to sudoers list by running
$ visudo
search for "root ALL = (ALL) ALL"
added "grader ALL = (ALL) ALL" just below it.
write and quit


to enable sudo for user method 2:
$ sudo touch /etc/sudoers.d/grader
$ sudo nano /etc/sudoers.d/grader
add the following line:
"grader ALL=(ALL) ALL"
write and quit (ctrl o, enter, ctrl x)

switch to new user:
$ su grader

switch to the users home directory:
$ cd /home/grader/

generate keys:
$ ssh-keygen -b4096 -f grader -t rsa
password: grad3r

make a .ssh folder inside the user folder:
$ mkdir .ssh

set permission for owner of file to read, write, and execute:
$ chmod 700 .ssh

store public key in authorized keys file:
$ cat grader.pub > .ssh/authorized_keys

set permission for owner to read and write to the file:
$ chmod 600 .ssh/authorized_keys

set the owner to grader and the group to admin:
$ sudo chown grader:admin .ssh

to set the owner to grader and the group to admin:
$ sudo chown grader:admin .ssh/authorized_keys

to copy user:
sudo rsync -avr grader /home/ubuntu/

set permissions:
$ sudo chmod 777 /home/ubuntu/grader

-- Using your local terminal --

to copy the key "<username>" from your AWS Server:
scp -i .ssh/LightsailDefaultKey-us-east-1.pem ubuntu@23.20.77.227:/home/ubuntu/grader .ssh/grader

set permissions so than owner can read
$ chmod 400 .ssh/grader

to access aws server as this user:
$ ssh -i .ssh/grader grader@23.20.77.227
password: grad3r

-LOGIN SUCCESSFUL!

test sudo:
$ sudo su
[sudo] password for grader:
grader

-success!

------------------------------------------------------------------

Forcing Key Based Authentication: (this was already set)

edit sshd_config: 
$ sudo nano /etc/ssh/sshd_config
change "PasswordAuthentication yes" to no.
write file and exit.
restart to ssh service:
$ sudo service ssh restart

---------------------------------------------------------------------

Remove password from grader: (this could have been done earlier when adding grader)
$ sudo nano /etc/sudoers.d/grader
change the following line from
"grader ALL=(ALL) ALL" to "grader ALL=(ALL) NOPASSWD:ALL"
write file and exit
login as root:
$ sudo su
edit visudo:
$ visudo
change the following line from
"grader ALL=(ALL) ALL" to "grader ALL=(ALL) NOPASSWD:ALL"
write file and exit
exit root:
$ exit

-------------------------------------------------------------
Change SSH port 22 to custom port 2200:
add custom TCP port 2200 in AWS Lightsail Networking settings for 23.20.77.227

Configure the Uncomplicated Firewall (UFW) as follows:
only allow incoming connections for SSH port 2200, HTTP port 80, and NTP port 123. (see steps below).
make sure ufw is inactive before configuring it:
$ sudo ufw status
output: status: inactive
set default to deny all incoming
$ sudo ufw default deny incoming
set default to allow all outgoing
$ sudo ufw default allow outgoing
allow ssh:
$ sudo ufw allow ssh
allow ssh on port 2200:
$ sudo ufw allow 2200/tcp
allow www
$ sudo ufw allow www
enable ufw
$ sudo ufw enable
check status
$ sudo ufw status

$ ssh -i .ssh/grader grader@23.20.77.227 -p 2200

output: ssh: connect to host 23.20.77.227 port 2200: Connection refused

$ ssh -i .ssh/grader grader@23.20.77.227

success

Edit sshd_config

$ sudo nano /etc/ssh/sshd_config
added Port 2200 below Port 22
write file and exit
reboot server

$ ssh -i .ssh/grader grader@23.20.77.227 -p 2200
success!

Edit sshd_config

$ sudo nano /etc/ssh/sshd_config
Remove Port 22
write file and exit

Remove SSH Port 22 from AWS Lightsail Networking settings.
Reboot server

$ sudo ufw allow ntp
$ sudo ufw deny 22

$ ssh -i .ssh/grader grader@23.20.77.227 -p 2200
Success!

-----------------------------------------------------
Install Apache
$ sudo apt-get install apache2

Now going to 23.20.77.227 in a browser shows the Apache2 landing page.

Apache, by default, serves its files from the /var/www/html directory. If you explore this directory you will find a file called index.html

------------------------------------------------------
Install mod_wsgi to serve Python 2.7

$ sudo apt-get install libapache2-mod-wsgi

Excerpt from Udacity: "
You then need to configure Apache to handle requests using the WSGI module. You’ll do this by editing the /etc/apache2/sites-enabled/000-default.conf file. This file tells Apache how to respond to requests, where to find the files for a particular site and much more. You can read up on everything this file can do within the Apache documentation.

For now, add the following line at the end of the <VirtualHost *:80> block, right before the closing </VirtualHost> line: WSGIScriptAlias / /var/www/html/myapp.wsgi

Finally, restart Apache with the sudo apache2ctl restart command.

You might get a warning saying "Could not reliably determine the server's fully qualified domain name". If you do, don't worry about it. Check out this AskUbuntu thread for a discussion of the cause of this message."

$ sudo nano /etc/apache2/sites-enabled/000-default.conf
add "WSGIScriptAlias / /var/www/html/myapp.wsgi" just before "</VirtualHost>".
write file and exit (ctrl o, enter, ctrl x)
$ sudo apache2ctl restart

Excerpt from Udacity: "WSGI is a specification that describes how a web server communicates with web applications. Most if not all Python web frameworks are WSGI compliant, including Flask and Django; but to quickly test if you have your Apache configuration correct you’ll write a very basic WSGI application.

You just defined the name of the file you need to write within your Apache configuration by using the WSGIScriptAlias directive. Despite having the extension .wsgi, these are just Python applications. Create the /var/www/html/myapp.wsgi file using the command sudo nano /var/www/html/myapp.wsgi. Within this file, write the following application:"

$ sudo nano /var/www/html/myapp.wsgi
Paste in the following:
"def application(environ, start_response):
    status = '200 OK'
    output = 'Hello Udacity!'

    response_headers = [('Content-type', 'text/plain'), ('Content-Length', str(len(output)))]
    start_response(status, response_headers)

    return [output]"
write file and exit (ctrl o, enter, crtl x)

Excerpt from Udacity: "This application will simply print return Hello Udacity! along with the required HTTP response headers. After saving this file you can reload http://localhost:8080 to see your application run in all its glory!"

Now going to 23.20.77.227 in a browser shows "Hellow Udacity!"

------------------------------------------------------
Install PostgreSQL

$ sudo apt-get install postgresql


-do not allow remote connections.
-create a new database user named "catalog" that has limited permissions 
 to the catalog application database.

------------------------------------------------------
Install git

$ sudo apt-get install git
Configure git for first time use:
$ git config --global user.name "G1enB1and"
$ git config --global user.email "glen.bland.81@gmail.com"
$ git config --global color.ui auto
$ git config --global merge.conflictstyle diff3
$ git config --list

##Git & Code Editor  
The last step of configuration is to get Git working with your code editor.
Below are three of the most popular code editors. If you use a different editor,
then do a quick search on Google for "associate X text editor with Git"
(replace the X with the name of your code editor).  

### Atom Editor Setup  
`git config --global core.editor "atom --wait"`  

### VSCode Setup  
`git config --global core.editor "code --wait"`  

### nano ?
$ git config --global core.editor "nano --wait" ?

nothing done for setting an editor yet. Going to see what happens without setting first.

----------------------------------------------------------------

## To clone an existing git repository:  
`git clone` downloads a copy of an existing repository to the current working directory.  
Current working directory must not already be a git repository.  

Pass the url to an existing git repository by putting the url after `git clone`  
like this: `git clone https://github.com/udacity/course-git-blog-project`  

optionally, you can pass a new repository name after the url to clone an  
existing repository to a new name. Like this:  
`git clone https://github.com/udacity/course-git-blog-project new-repo-name`  

Don't forget to `cd` into the newly cloned directory before attempting any  
other git commands on it.  

$ sudo mkdir /home/ubuntu/gitrepo
$ cd /home/ubuntu/gitrepo
$ sudo git clone https://github.com/G1enB1and/fullstack-nanodegree-vm catalog
$ cd catalog
$ cd vargrant

$ cd /var/www/html
$ sudo mv index.html apache2index.html
$ sudo mv myapp.wsgi helloworld.wsgi
$ sudo mv /home/ubuntu/gitrepo/catalog/vagrant/catalog /var/www/html

---------------------------------------------------------

$ sudo nano /etc/apache2/sites-enabled/000-default.conf
edit "WSGIScriptAlias / /var/www/html/myapp.wsgi" to
"WSGIScriptAlias / /var/www/html/catalog/application.wsgi".
write file and exit (ctrl o, enter, ctrl x)
$ sudo mv application.py catalog.py
$ sudo apache2ctl restart
$ sudo touch /var/www/html/catalog/application.wsgi
$ sudo nano /var/www/html/catalog/application.wsgi

import sys
import logging
logging.basicConfig(stream=sys.stderr)
sys.path.insert(0,"/var/www/html/catalog/")
from catalog import app as application
application.run()

write file and exit (ctrl o, enter, ctrl x)

$ cd /etc/apache2/conf-enabled/
$ sudo touch catalog.conf
$ sudo nano catalog.conf

<VirtualHost *:80>
                ServerName 23.20.77.227
                ServerAdmin glen@glenbland.com
                WSGIDaemonProcess catalog
                WSGIScriptAlias / /var/www/html/catalog/application.wsgi
                <Directory /var/www/html/catalog/>
                        Order allow,deny
                        Allow from all
                </Directory>
                ErrorLog /var/www/html/catalog/FlaskApp-error.log
                LogLevel warn
                CustomLog ${APACHE_LOG_DIR}/FlaskApp-access.log combined
</VirtualHost>

write file and exit (ctrl o, enter, ctrl x)

$ sudo nano /etc/apache2/apache2.conf
add the following line if it's not already there: (in my case it was already there)
IncludeOptional conf-enabled/*.conf

write file and exit (ctrl o, enter, ctrl x)

$ sudo service apache2 restart

---------------------------------------------------------

$ cd /var/www/html/catalog/
$ sudo apt install python-pip
$ pip install Flask

To check installation:
$ pip freeze|grep -i flask
output: Flask==1.0.2

---------------------------------------------------------
Test application:
$ python application.wsgi
ImportError: No module named sqlalchemy

$ pip install sqlalchemy

Test application:
$ python application.wsgi
ImportError: No module named oauth2client.client

$ pip install oauth2client

Test application:
$ python application.wsgi
ImportError: No module named requests

$ pip install requests

-----------------------------------------------------------

Test application:
$ python application.wsgi
 
application running...

browsing to 23.20.77.227 and 23.20.77.227:8000 both give error:

Internal Server Error
The server encountered an internal error or misconfiguration and was unable to complete your request.

Please contact the server administrator at glen@glenbland.com to inform them of the time this error occurred, and the actions you performed just before this error.

More information about this error may be available in the server error log.

Apache/2.4.18 (Ubuntu) Server at 23.20.77.227 Port 80

-------------------------------------------------------------

https://stackoverflow.com/questions/42050982/flask-wsgi-no-module-named-flask
says to 
Edit /etc/apache2/sites-available/FlaskApp.conf
(I only have 000-default.conf here, I used conf-enabled instead of sites-enabled. I also named it catalog.conf instead of FlaskApp.conf.

Add the following two lines before the "WSGIScriptAlias" line:

WSGIDaemonProcess FlaskApp python-path=/var/www/FlaskApp:/var/www/FlaskApp/venv/lib/python2.7/site-packages
WSGIProcessGroup FlaskApp

or

WSGIDaemonProcess FlaskApp python-home=/var/www/FlaskApp/venv/FlaskApp WSGIProcessGroup FlaskApp

Restart Apache with "service apache2 restart"

https://www.digitalocean.com/community/tutorials/how-to-run-django-with-mod_wsgi-and-apache-with-a-virtualenv-python-environment-on-a-debian-vps





https://www.youtube.com/watch?v=x6SvecADw2M
http://fosshelp.blogspot.com/2014/03/how-to-deploy-flask-application-with.html

----------------------------------------------------------
$ sudo mv /var/www/html/catalog /var/www/FlaskApp
$ sudo nano application.wsgi
change to:

import os
import sys
import logging
logging.basicConfig(stream=sys.stderr)
sys.path.insert(0,"/var/www/FlaskApp/")
from catalog import app as application
application.run()

$ sudo nano /etc/apache2/conf-enabled/catalog.conf

<VirtualHost *:80>
                ServerName 23.20.77.227
                ServerAdmin glen@glenbland.com
                WSGIDaemonProcess catalog
                WSGIScriptAlias / /var/www/FlaskApp/application.wsgi
                <Directory /var/www/FlaskApp/>
                        Order allow,deny
                        Allow from all
                </Directory>
                ErrorLog /var/www/FlaskApp/FlaskApp-error.log
                LogLevel warn
                CustomLog ${APACHE_LOG_DIR}/FlaskApp-access.log combined
</VirtualHost>
$ cd /etc/apache2/sites-enabled/
$ sudo touch catalog.conf
$ sudo nano catalog.conf

<VirtualHost *:80>
                ServerName 23.20.77.227
                ServerAdmin glen@glenbland.com
                WSGIDaemonProcess catalog
                WSGIScriptAlias / /var/www/FlaskApp/application.wsgi
                <Directory /var/www/FlaskApp/>
                        Order allow,deny
                        Allow from all
                </Directory>
                ErrorLog /var/www/FlaskApp/FlaskApp-error.log
                LogLevel warn
                CustomLog ${APACHE_LOG_DIR}/FlaskApp-access.log combined
</VirtualHost>

$ sudo nano /etc/apache2/sites-enabled/000-default.conf
changed
WSGIScriptAlias / /var/www/FlaskApp/application.wsgi

-------------------------------------------------------------
Setup venv virtual environment:

$ cd /var/www/FlaskApp

$ sudo pip install virtualenv
(don't use sudo with virtualenv venv or you won't be able to use pip within it)
$ virtualenv venv
venv can be replaced with any name
$ source venv/bin/activate
$ pip install Flask

--------------------------------------------------------------

##Virtualenv Settings ??? - not added yet. don't understand

activate_this = '/var/www/FlaskApp/venv/bin/activate_this.py'
execfile(activate_this, dict(__file__=activate_this))


$ sudo nano application.wsgi
change to:

import os
import sys
import logging

logging.basicConfig(stream=sys.stderr)

activate_this = '/var/www/FlaskApp/venv/bin/activate_this.py'
execfile(activate_this, dict(__file__=activate_this))

sys.path.insert(0,"/var/www/FlaskApp/")

from catalog import app as application
application.run()

----------------------------------------------------------
$ sudo nano catalog.conf (in sites-enabled and conf-enabled)

<VirtualHost *:80>
                ServerName 23.20.77.227
                ServerAdmin glen@glenbland.com
                WSGIDaemonProcess FlaskApp python-path=/var/www/FlaskApp:/var/www/FlaskApp/venv/lib/python2.7/site-packages
                WSGIProcessGroup FlaskApp
                WSGIScriptAlias / /var/www/FlaskApp/application.wsgi
                WSGIScriptReloading On
                <Directory /var/www/FlaskApp/>
                        Order allow,deny
                        Allow from all
                </Directory>
                ErrorLog /var/www/FlaskApp/FlaskApp-error.log
                LogLevel warn
                CustomLog ${APACHE_LOG_DIR}/FlaskApp-access.log combined
</VirtualHost>

-------------------------------------------------------------

root@ip-172-26-6-126:/etc/apache2/conf-enabled# service apache2 restart
Job for apache2.service failed because the control process exited with error cod
e. See "systemctl status apache2.service" and "journalctl -xe" for details.


duplicate wsgi designation in catalog.conf.

removed the copy in conf-enabled and kept the one in sites-enabled.
This fixed the issue and allows apche2 service to restart.

----------------------------------------------------------------

now I am still getting internal server error

$ sudo mv sites-enabled/catalog.conf sites-available/catalog.conf

Enable site
$ sudo a2ensite catalog
Restart server
$ sudo systemctl restart apache2
$ sudo apache2ctl restart

set permissions
sudo chmod -R 755 /var/www

changed catalog.py file to run on port 8000 as it was before I changed it to 80 earlier.

$ sudo ufw allow 8000

added custom tcp port 8000 in aws
rebooted.

$ sudo a2dissite 000-default 
$ sudo systemctl restart apache2

-----------------------------------------------------

$ ls -las /etc/apache2/sites-available/
total 24
4 drwxr-xr-x 2 root root 4096 Dec 26 15:18 .
4 drwxr-xr-x 8 root root 4096 Dec 14 15:55 ..
4 -rw-r--r-- 1 root root 1392 Dec 14 15:59 000-default.conf
4 -rw-r--r-- 1 root root  716 Dec 14 18:13 catalog.conf
8 -rw-r--r-- 1 root root 6338 Jun 11  2018 default-ssl.conf

$ ls -las /etc/apache2/sites-enabled/
total 8
4 drwxr-xr-x 2 root root 4096 Dec 26 15:57 .
4 drwxr-xr-x 8 root root 4096 Dec 14 15:55 ..
0 lrwxrwxrwx 1 root root   31 Dec 26 15:19 catalog.conf -> ../sites-available/catalog.conf


WSGIDaemonProcess FlaskApp python-path=/var/www/FlaskApp:/var/w$/var/www/FlaskApp/venv/lib/python2.7/site-packages

-----------------------------------------------------------------

moved files from FlaskApp to FlaskApp/venv
updated catalog.conf to point to FlaskApp/venv
$ sudo python catalog.py

--------------------  It works!!!!!  ----------------------------

final catalog.conf in /etc/apache2/sites-available/ is as follows:

<VirtualHost *:80>
                ServerName 23.20.77.227
                ServerAdmin glen@glenbland.com
                WSGIDaemonProcess FlaskApp python-path=/var/www/FlaskApp/venv:/var/www/FlaskApp/venv/lib/python2.7/site-packages
                WSGIProcessGroup FlaskApp
                WSGIScriptAlias / /var/www/FlaskApp/venv/application.wsgi
                WSGIScriptReloading On
                <Directory /var/www/FlaskApp/venv>
                        Order allow,deny
                        Allow from all
                </Directory>
                ErrorLog /var/www/FlaskApp/venv/FlaskApp-error.log
                LogLevel warn
                CustomLog ${APACHE_LOG_DIR}/FlaskApp-access.log combined
</VirtualHost>


------------------------------------------------------------------
Google Login link does not work:
400. That’s an error.

Error: invalid_request

Permission denied to generate login hint for target domain.

Request Details
response_type=permission id_token code
scope=openid email
openid.realm=
prompt=consent
access_type=offline
include_granted_scopes=true
redirect_uri=storagerelay://http/23.20.77.227:8000?id=auth231985
client_id=595888207696-saiiv3l4m0obuhj79al9liojp2r5eea9.apps.googleusercontent.com
ss_domain=http://23.20.77.227:8000
gsiwebsdk=shim


---------------------------------------------------------------
changed catalog.conf

<VirtualHost *:80>
                ProxyPreserveHost On
                ProxyRequests Off
                ServerName www.glenallin.com
                ServerAlias glenallin.com
                ProxyPass / http://23.20.77.227:8000/
                ProxyPassReverse / http://23.20.77.227:8000/
                ServerAdmin glen@glenbland.com
                WSGIDaemonProcess FlaskApp python-path=/var/www/FlaskApp/venv:/var/www/FlaskApp/venv/lib/python2.7/site-packages
                WSGIProcessGroup FlaskApp
                WSGIScriptAlias / /var/www/FlaskApp/venv/application.wsgi
                WSGIScriptReloading On
                <Directory /var/www/FlaskApp/venv>
                        Order allow,deny
                        Allow from all
                </Directory>
                ErrorLog /var/www/FlaskApp/venv/FlaskApp-error.log
                LogLevel warn
                CustomLog ${APACHE_LOG_DIR}/FlaskApp-access.log combined
</VirtualHost>


$ sudo a2enmod proxy && sudo
 a2enmod proxy_http && sudo service apache2 restart

Enabling module proxy.
To activate the new configuration, you need to run:
  service apache2 restart
Considering dependency proxy for proxy_http:
Module proxy already enabled
Enabling module proxy_http.
To activate the new configuration, you need to run:
  service apache2 restart

grader@ip-172-26-6-126:/etc/apache2/sites-available$

this is also where I registered glenallin.com and created dns zone as described at top and updated google oauth credentials to include glenallin.com/login and glenallin.com/gconnect

Google login now accepts credentials and does not give error, but login does not complete either.
error log shows attempt to write a read-only database.

$ sudo chmod 755 /var/www/FlaskApp/venv/
$ sudo chmod 756 /var/www/FlaskApp/venv/catalog.db

$ sudo chown www-data:www-data /var/www/FlaskApp/venv/catalog.db

---------------------------------------------------------------

Login as postgres from root user (this is the PostgreSQL superuser)
$ sudo su
$ su - postgres

create a new postgresql user named catalog 
(disallow creating users -A and databases -D [allow would be -a -d])
$ createuser catalog -A -D

( -p would ask for password, but I have no password for the catalog user)


+Run the psql program as the database owner or the postgres superuser
$ psql

---------------------------------------------------------------

/var/lib/postgresql/9.5/main

http://www.ntu.edu.sg/home/ehchua/programming/sql/PostgreSQL_GetStarted.html

Install PostgreSQL
$ sudo apt-get install postgresql postgresql-contrib

Verify the installation
$ dpkg --status postgresql
Version: 9.5
......
$ whereis postgresql
postgresql: /usr/lib/postgresql /etc/postgresql /usr/share/postgresql
$ which psql     // psql is an interactive PostgreSQL client
/usr/bin/psql
$ ll /usr/bin/psql
lrwxrwxrwx 1 root root 37 Jul 16 16:22 /usr/bin/psql -> ../share/postgresql-common/pg_wrapper*

---------------------------------------------------------------

might need to use the default user and group, which is www-data


$ sudo chown www-data:www-data /var/www/FlaskApp/venv/catalog.db


---------------------------------------------------------------

for some reason I had to reinstall flask, sqlalchemy, oauth2client, and requests with pip install, but now the app is fully functional with no errors, even login and database edits!!

BUT... I get service Unavailable if I close my terminal window. 
I need to find a way to make catalog.py autostart and restart when server starts or restarts. 

----------------------------------------------------------------

import os
import sys
import logging
logging.basicConfig(stream=sys.stderr)
sys.path.insert(0,"/var/www/FlaskApp/")
from catalog import app as application
application.run()

works.

activate_this = '/var/www/FlaskApp/venv/bin/activate_this.py'
execfile(activate_this, dict(__file__=activate_this))

does not work.
-----------------------------------------------------------------
sudo a2enconf catalog
sudo /etc/init.d/apache2 restart

source venv/bin/activate

-------------------------------------------------------------------

<VirtualHost *:80>
    . . .

    Alias /static /home/sammy/myproject/static
    <Directory /home/sammy/myproject/static>
        Require all granted
    </Directory>

    <Directory /home/sammy/myproject/myproject>
        <Files catalog.py>
            Require all granted
        </Files>
    </Directory>

    WSGIDaemonProcess myproject python-home=/home/sammy/myproject/myprojectenv python-path=/home/sammy/myproject
    WSGIProcessGroup myproject
    WSGIScriptAlias / /home/sammy/myproject/myproject/catalog.py

</VirtualHost>

---------------------------------------------------------------------------------

Wrapping Up Some Permissions Issues
If you are using the SQLite database, which is the default used in this article, you need to allow the Apache process access to this file.

To do so, the first step is to change the permissions so that the group owner of the database can read and write. The database file is called db.sqlite3 by default and it should be located in your base project directory:

chmod 664 ~/myproject/db.sqlite3
Afterwards, we need to give the group Apache runs under, the www-data group, group ownership of the file:

sudo chown :www-data ~/myproject/db.sqlite3
In order to write to the file, we also need to give the Apache group ownership over the database's parent directory:

sudo chown :www-data ~/myproject
We need to adjust through our firewall again. We no longer need port 8000 open since we are proxying through Apache, so we can remove that rule. We can then add an exception to allow traffic to the Apache process:

sudo ufw delete allow 8000
sudo ufw allow 'Apache Full'
Check your Apache files to make sure you did not make any syntax errors:

sudo apache2ctl configtest
As long as the last line of output looks like this, your files are in good shape:

Output
. . .
Syntax OK
Once these steps are done, you are ready to restart the Apache service to implement the changes you made. Restart Apache by typing:

sudo systemctl restart apache2


-------------------------------------------------------------------------
configure nameserver

----------------------------------------------------------------------------

Notice the new syntax “Require all granted” instead of the obsolete “Order allow,deny”, “Allow from all”. If you mistakenly use the obsolete syntax, you get “‘AH01630: client denied by server configuration” in the logs. The “Require all granted” is used since Apache 2.4.


-----------------------------------------------------------------------------

## /etc/apache2/sites-available/catalog.conf (from example)
<VirtualHost *>
 		ServerName glenallin.com
		WSGIDaemonProcess catalog user=ubuntu group=ubuntu threads=5
		WSGIScriptAlias / /var/www/FlaskApp/venv/application.wsgi
		<Directory /var/www/FlaskApp/venv/>
			WSGIProcessGroup catalog
			WSGIApplicationGroup %{GLOBAL}
			WSGIScriptReloading On
			Require all granted
		</Directory>
</VirtualHost>


## new edit (works) ------------------------changing *:80 to * fixed it!!!-----------
<VirtualHost *>
                ProxyPreserveHost On
                ProxyRequests Off
                ServerName glenallin.com
                ServerAlias glenallin.com
                ProxyPass / http://23.20.77.227:8000/
                ProxyPassReverse / http://23.20.77.227:8000/
                ServerAdmin glen@glenbland.com
                WSGIDaemonProcess catalog user=www-data group=www-data threads=5 python-path=/var/www/FlaskApp/venv:/var/www/FlaskApp/venv/lib/python2.7/site-packages
                WSGIScriptAlias / /var/www/FlaskApp/venv/application.wsgi
                <Directory /var/www/FlaskApp/venv>
			WSGIProcessGroup catalog
			WSGIApplicationGroup %{GLOBAL}
			WSGIScriptReloading On
                        Require all granted
                </Directory>
                ErrorLog /var/www/FlaskApp/venv/catalog-error.log
                LogLevel warn
                CustomLog ${APACHE_LOG_DIR}/catalog-access.log combined
</VirtualHost>

## original
<VirtualHost *:80>
                ProxyPreserveHost On
                ProxyRequests Off
                ServerName www.glenallin.com
                ServerAlias glenallin.com
                ProxyPass / http://23.20.77.227:8000/
                ProxyPassReverse / http://23.20.77.227:8000/
                ServerAdmin glen@glenbland.com
                WSGIDaemonProcess FlaskApp python-path=/var/www/FlaskApp/venv:/var/www/FlaskApp/venv/lib/python2.7/site-packages
                WSGIProcessGroup FlaskApp
                WSGIScriptAlias / /var/www/FlaskApp/venv/application.wsgi
                WSGIScriptReloading On
                <Directory /var/www/FlaskApp/venv>
                        Order allow,deny
                        Allow from all
                </Directory>
                ErrorLog /var/www/FlaskApp/venv/FlaskApp-error.log
                LogLevel warn
                CustomLog ${APACHE_LOG_DIR}/FlaskApp-access.log combined
</VirtualHost>

----------------------------------------------------------------------------------

$ sudo ufw allow 'Apache Full'

-----------------------------------------------------------------------------------
##/var/www/flaskApp/venv/application.wsgi (added /venv/)
import os
import sys
import logging
logging.basicConfig(stream=sys.stderr)
sys.path.insert(0,"/var/www/FlaskApp/venv/")
from catalog import app as application
application.run()
---------------------------------------------------------------------------

Serving Flask app "catalog" (lazy loading)
 * Environment: production
   WARNING: Do not use the development server in a production environment.
   Use a production WSGI server instead.

FIXED BY CHANGING <VIRTUALHOST *:80> TO <VIRTUALHOST *> !!!


---------------------------------------------------------------------------

Prevent login as root
$ sudo nano /etc/ssh/sshd_config
PermitRootLogin no

----------------------------------------------------------------------------
$ sudo /etc/init.d/apache2 restart

$ sudo a2dismod proxy_http
$ sudo a2dismod proxy
$ sudo service apache2 restart

sudo apache2ctl configtest
$ sudo a2enmod proxy && sudo
 a2enmod proxy_http && sudo service apache2 restart

----------------------------------------------------------------------------
$ tail -f /var/www/FlaskApp/venv/catalog-error.log

[Wed Jan 02 23:46:48.911913 2019] [wsgi:error] [pid 2645:tid 140032792413952] 
[remote 177.184.83.207:13299]     open('client_secrets.json', 'r').read())['web']['client_id']
[Wed Jan 02 23:46:48.911927 2019] [wsgi:error] [pid 2645:tid 140032792413952] 
[remote 177.184.83.207:13299] IOError: [Errno 2] No such file or directory: 'client_secrets.json'
[Wed Jan 02 23:48:20.317536 2019] [wsgi:error] [pid 2799:tid 140456514791168] 
[remote 12.69.190.13:668] mod_wsgi (pid=2799): Target WSGI script '/var/www/FlaskApp/venv/application.wsgi' cannot be loaded as Python module.
[Wed Jan 02 23:48:20.317574 2019] [wsgi:error] [pid 2799:tid 140456514791168] 
[remote 12.69.190.13:668] mod_wsgi (pid=2799): Exception occurred processing WSGIscript '/var/www/FlaskApp/venv/application.wsgi'.
[Wed Jan 02 23:48:20.317592 2019] [wsgi:error] [pid 2799:tid 140456514791168] 
[remote 12.69.190.13:668] Traceback (most recent call last):
[Wed Jan 02 23:48:20.317606 2019] [wsgi:error] [pid 2799:tid 140456514791168] 
[remote 12.69.190.13:668]   File "/var/www/FlaskApp/venv/application.wsgi", line 6, in <module>
[Wed Jan 02 23:48:20.317646 2019] [wsgi:error] [pid 2799:tid 140456514791168] 
[remote 12.69.190.13:668]     from catalog import app as application
[Wed Jan 02 23:48:20.317655 2019] [wsgi:error] [pid 2799:tid 140456514791168] 
[remote 12.69.190.13:668]   File "/var/www/FlaskApp/venv/catalog.py", line 29, in<module>
[Wed Jan 02 23:48:20.317798 2019] [wsgi:error] [pid 2799:tid 140456514791168] 
[remote 12.69.190.13:668]     open('client_secrets.json', 'r').read())['web']['client_id']
[Wed Jan 02 23:48:20.317817 2019] [wsgi:error] [pid 2799:tid 140456514791168] 
[remote 12.69.190.13:668] IOError: [Errno 2] No such file or directory: 'client_secrets.json'

------------------------------------------------------------------------------

$ sudo chmod 775 /var/www/FlaskApp/venv/client_secrets.json
$ sudo chown www-data:www-data /var/www/FlaskApp/venv/client_secrets.json
$ sudo chmod 775 /var/www/FlaskApp/venv/catalog.db
$ sudo chmod 777 /var/www/FlaskApp/venv/

$ sudo chown -R ubuntu:www-data catalog
$ sudo chmod -R g+s catalog
(-R = recursive g+s keeps same group permissions for new files in that directory)

addgroup sftp-users
adduser youruser sftp-users
adduser anotheruser sftp-users

chown root /var/www
chgrp sftp-users /var/www
chmod 775 /var/www
chmod g+s /var/www

The g+s sets the "sticky bit" for the group, which correctly propagates the 
group and the permissions to all files (they'll be 664) and directories (775) 
as they are created. The number of directories that need 'www-data' as the 
owner should be kept to a bare minimum.

add the group (www-data) to the user (ubuntu) 
$ sudo usermod -a -G www-data ubuntu
you can check with $ groups username

$ sudo chown ubuntu:www-data /var/www/
$ sudo chown ubuntu:www-data /var/www/FlaskApp/
$ sudo chown -R ubuntu:www-data /var/www/FlaskApp/venv/
$ sudo chmod -R g+s .

all new files and subdirectories created within the current directory inherit the group ID of the directory, rather than the primary group ID of the user who created the file. This will also be passed on to new subdirectories created in the current directory.

g+s affects the file's group ID but does not affect the owner ID.

<VirtualHost *>
                ServerName glenallin.com
                ServerAdmin glen@glenbland.com

                WSGIDaemonProcess catalog user=ubuntu group=www-data threads=5 python-path=/var/www/FlaskApp/venv:/var/www/FlaskApp/venv/lib/python2.7/site-packages
                WSGIScriptAlias / /var/www/FlaskApp/venv/application.wsgi
                WSGIScriptReloading On

		DocumentRoot /var/www/FlaskApp/venv

		Alias /client_secrets.json /var/www/FlaskApp/venv/client_secrets.json

                <Directory /var/www/FlaskApp/venv>
			WSGIProcessGroup catalog
               		WSGIApplicationGroup %{GLOBAL}
                        Require all granted
                </Directory>
                ErrorLog /var/www/FlaskApp/venv/catalog-error.log
                LogLevel warn
                CustomLog /var/www/FlaskApp/venv/catalog-access.log combined
</VirtualHost>

$sudo nano /var/www/FlaskApp/venv/application.wsgi
activate_this = '/var/www/FlaskApp/venv/bin/activate_this.py'
execfile(activate_this, dict(__file__=activate_this))
import os
import sys
sys.stdout = sys.stderr
sys.path.insert(0, "/var/www/FlaskApp/venv/")
from catalog import app as application
application.run()

------------------------------------------------------------------------
I made the mistake of using sudo when I created virtualenv venv, which results in not being able
to use pip within it. now I have to copy files out of venv, remove venv, and recreate it without sudo.

$ source /var/www/FlaskApp/venv/bin/activate
$ pip install Flask
$ pip install sqlalchemy
$ pip install oauth2client
$ pip install requests

----------------------------------------------------------------------

https://modwsgi.readthedocs.io/en/develop/user-guides/quick-configuration-guide.html

the user that Apache runs as (www-data) must have READ access to both the WSGI 
application script file and all the parent directories that contain it.

Add root into the group www-data
$ sudo usermod -a -G www-data root
Change group for /var to www-data
$ sudo chgrp www-data /var
Set group permissions for /var to read write and execute
$ sudo chmod g+rwxs /var
$ sudo chgrp www-data /var/www/FlaskApp/venv
$ sudo usermod -a -G www-data ubuntu
$ sudo chgrp www-data /var/www/FlaskApp/venv/bin
$ sudo chgrp www-data /var/www/FlaskApp/venv/lib
$ sudo chgrp www-data /var/www/FlaskApp/venv/include
$ sudo chgrp www-data /var/www/FlaskApp/venv/local
$ sudo chmod g+rwxs /var/www/
$ sudo chmod g+rwxs /var/www/FlaskApp
$ sudo chmod g+rwxs /var/www/FlaskApp/venv

http://help.pythonanywhere.com/pages/NoSuchFileOrDirectory

fix no such file error by changing reference to client_secrets.json to full path in linux style rather than windows style in python code or research above link for other fixes to this.


-----------------------------------------------------------------------
working, but not logging in with google

<VirtualHost *:80>
                ServerName glenallin.com
                ServerAdmin glen@glenbland.com

                WSGIScriptAlias / /var/www/FlaskApp/flaskapp.wsgi

                <Directory /var/www/FlaskApp/FlaskApp>
                        Require all granted
                </Directory>

                Alias /static /var/www/FlaskApp/FlaskApp/static

                <Directory /var/www/FlaskApp/FlaskApp/static>
                        Require all granted
                </Directory>

                ErrorLog /var/www/FlaskApp/error.log
                LogLevel warn
                CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>
------------------------------------------------------------------------

<VirtualHost *:80>
                ServerName glenallin.com
                ServerAdmin glen@glenbland.com

                WSGIScriptAlias / /var/www/FlaskApp/flaskapp.wsgi
		WSGIDaemonProcess FlaskApp user=www-data group=www-data threads=5
		WSGIProcessGroup FlaskApp
		WSGIApplicationGroup %{GLOBAL}

                <Directory /var/www/FlaskApp/FlaskApp>
                        Require all granted
                </Directory>

                Alias /static /var/www/FlaskApp/FlaskApp/static
		Alias /catalog.db /var/www/FlaskApp/FlaskApp/catalog.db
		Alias /database_setup.py /var/www/FlaskApp/FlaskApp/database_setup.py

                <Directory /var/www/FlaskApp/FlaskApp/static>
                        Require all granted
                </Directory>

                ErrorLog /var/www/FlaskApp/error.log
                LogLevel warn
                CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>

--------------------------------------------------------------------------

I changed python code in __init__.py and database_setup.py to replace relative paths
with full linux path to client_secrets.json (found at top, but also in gconnect function) 
and catalog.db (in both files), and path to downloaduserpic.

that fixed several issues, including login.

I am currently unable to edit the database through the app as deployed by wsgi, 
but I am able to do so if I run python __init__.py and browse to :8000.
Upon making a sucessful edit this way I get response http/1.1 302 (which roughly means temporary redirect)

might have to change
#!/usr/bin/python
to
#!/usr/bin/env python2.7

---------------------------------------------------------------------------
* Install PostgreSQ package: `sudo apt-get install postgresql postgresql-contrib`

* Configure PostgreSQL: `sudo -u postgres psql postgres`

* Create database user catalog – limited permission-

```

postgres=# CREATE USER catalog WITH PASSWORD ‘password’;

postgres=# ALTER USER catalog CREATEDB;

postgres=# CREATE DATABASE catalog with OWNER catalog;

postgres=# \c catalog

catalog=# REVOKE ALL ON SCHEMA public FROM public;

catalog=# GRANT ALL ON SCHEMA public TO catalog;

catalog=# \q

```
------------------------------------------------------------------------------


